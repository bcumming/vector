// generated by CommonCode.cmake, do not edit.

/**
 * @file cyme/version.h
 * Defines version macros and class for cyme.
 */

#ifndef CYME_VERSION_H
#define CYME_VERSION_H

#include <cyme/api.h>
#include <string>

namespace cyme
{
    /** The current major version. */
#   define CYME_VERSION_MAJOR 1

    /** The current minor version. */
#   define CYME_VERSION_MINOR 2

    /** The current patch level. */
#   define CYME_VERSION_PATCH 0

    /** The current SCM revision. */
#   define CYME_VERSION_REVISION 0x9034f10

    /** The current binary interface. */
#   define CYME_VERSION_ABI 1

/** True if the current version is newer than the given one. */
#   define CYME_VERSION_GT( MAJOR, MINOR, PATCH )       \
    ( (CYME_VERSION_MAJOR>MAJOR) ||                     \
      (CYME_VERSION_MAJOR==MAJOR && (CYME_VERSION_MINOR>MINOR || \
          (CYME_VERSION_MINOR==MINOR && CYME_VERSION_PATCH>PATCH))))

/** True if the current version is equal or newer to the given. */
#   define CYME_VERSION_GE( MAJOR, MINOR, PATCH )       \
    ( (CYME_VERSION_MAJOR>MAJOR) ||                     \
      (CYME_VERSION_MAJOR==MAJOR && (CYME_VERSION_MINOR>MINOR || \
          (CYME_VERSION_MINOR==MINOR && CYME_VERSION_PATCH>=PATCH))))

/** True if the current version is older than the given one. */
#   define CYME_VERSION_LT( MAJOR, MINOR, PATCH )       \
    ( (CYME_VERSION_MAJOR<MAJOR) ||                     \
      (CYME_VERSION_MAJOR==MAJOR && (CYME_VERSION_MINOR<MINOR || \
          (CYME_VERSION_MINOR==MINOR && CYME_VERSION_PATCH<PATCH))))

/** True if the current version is older or equal to the given. */
#   define CYME_VERSION_LE( MAJOR, MINOR, PATCH )       \
    ( (CYME_VERSION_MAJOR<MAJOR) ||                     \
      (CYME_VERSION_MAJOR==MAJOR && (CYME_VERSION_MINOR<MINOR || \
        (CYME_VERSION_MINOR==MINOR && CYME_VERSION_PATCH<=PATCH))))

/** Information about the current cyme version. */
class CYME_API Version
{
public:
    /** @return the current major version of cyme. */
    static int getMajor();

    /** @return the current minor version of cyme. */
    static int getMinor();

    /** @return the current patch level of cyme. */
    static int getPatch();

    /** @return the current cyme version (MM.mm.pp). */
    static std::string getString();

    /** @return the SCM revision. */
    static int getRevision();

    /** @return the current binary interface version of cyme. */
    static int getABI();

    /** @return the current cyme version plus the git SHA hash (MM.mm.pp.rev). */
    static std::string getRevString();

    /**
     * Runtime check for ABI compatibility.
     *
     * Call from code using cyme. Will fail if the executable
     * was compiled against a version incompatible with the runtime version.
     *
     * @return true if the link-time and compile-time DSO are compatible.
     */
    static bool check()
    {
        return getMajor()==CYME_VERSION_MAJOR &&
               getMinor()==CYME_VERSION_MINOR;
    }
};

}

#endif
